---
import {Icon} from 'astro-icon/components'
import NavLink from './Buttons/NavLink.astro'
import type {Link} from '~constants/navigation'
import {websiteNextUrl} from '~constants/urls'
const isQuestionPage = Astro.url.pathname.includes('question')

interface Props {
  links: Link[]
}
const {links} = Astro.props
---

<div class='drawer drawer-end'>
  <input
    id='who-drawer'
    type='checkbox'
    class='drawer-toggle'
    aria-label='sidebar toggle'
    checked={false}
  />
  <div class='drawer-content transition-all' id='main'>
    <!-- Navbar -->
    <nav class='navbar fixed h-16 justify-between pl-0 pr-4 backdrop-blur md:px-4 z-10'>
      <a href='/' aria-label='homepage link'>
        <Icon name='logo' class='w-48 btn btn-ghost' />
      </a>
      <div class:list={['flex-none hidden', {'lg:block': !isQuestionPage}]}>
        <ul class='menu menu-horizontal'>
          <!-- Navbar menu content here -->
          {
            links.map((link) => (
              <NavLink
                {...link}
                selected={Astro.url.pathname === link.href}
                class='menu-title'
                hideIcon
                size='sm'
                dark={link.button}
                class:list={[link.play && 'play']}
              />
            ))
          }
        </ul>
      </div>
    </nav>
    <!-- main content -->
    <slot />
  </div>
  <nav class='drawer-side'>
    <label for='who-drawer' class='drawer-overlay'></label>
    <ul class='menu h-full w-full md:w-80 bg-darkest pt-20 gap-3 md:px-5'>
      <!-- Sidebar content here -->
      {
        links.map((link) => (
          <NavLink
            {...link}
            selected={Astro.url.pathname === link.href}
            size='lg'
            button
            variant={link.button ? 'primary' : 'secondary'}
            light={!link.button}
            dark={link.button}
            hideIcon={!link.button}
            class:list={[link.button && 'mt-5 menu-title', link.play && 'play']}
          />
        ))
      }
      <NavLink
        selected={false}
        title='Login'
        href={websiteNextUrl}
        external
        class='mt-auto'
        variant='secondary'
        light
        button
      />
    </ul>
  </nav>
</div>

<!-- hamburger menu -->
<div
  class='flex-none fixed right-2 md:right-5 top-2 z-10 border rounded-2xl border-white/30 overflow-hidden'
  class:list={[{'lg:hidden': !isQuestionPage}]}
>
  <label class='right swap btn-ghost swap-rotate btn-square btn' id='who-menu-button'>
    <!-- hamburger icon -->
    <svg
      class='swap-off fill-current'
      xmlns='http://www.w3.org/2000/svg'
      width='32'
      height='32'
      viewBox='0 0 512 512'
      ><path d='M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z'></path></svg
    >

    <!-- close icon -->
    <svg
      class='swap-on fill-current'
      xmlns='http://www.w3.org/2000/svg'
      width='32'
      height='32'
      viewBox='0 0 512 512'
      ><polygon
        points='400 145.49 366.51 112 256 222.51 145.49 112 112 145.49 222.51 256 112 366.51 145.49 400 256 289.49 366.51 400 400 366.51 289.49 256 400 145.49'
      ></polygon></svg
    >
  </label>
</div>

<!-- top of site pixel anchor -->
<div id='top-of-site-pixel-anchor' class='absolute w-px h-px top-24 left-0'></div>

<script>
  import {initGame} from '~stores'
  initGame()
</script>

<script>
  const button = document.getElementById('who-menu-button')!
  const drawer = document.getElementById('who-drawer')! as HTMLInputElement
  const links = document.querySelectorAll('.drawer-side .menu a')!
  const bg = document.querySelector('.drawer-overlay')!

  for (const link of links) {
    link?.addEventListener('click', () => {
      drawer.checked = false
      button.classList.remove('swap-active')
    })
  }

  button?.addEventListener('click', (e) => {
    e.preventDefault()
    drawer.checked = !drawer.checked
    button.classList.toggle('swap-active')
  })

  bg?.addEventListener('click', (e) => {
    button.classList.toggle('swap-active')
  })
</script>

<script>
  const navbar = document.querySelectorAll('.navbar')![0]
  let observer = new IntersectionObserver((entries) => {
    if (entries[0].boundingClientRect.y < 0) {
      navbar.classList.add('backdrop-blur')
    } else {
      navbar.classList.remove('backdrop-blur')
    }
  })
  observer.observe(document.querySelector('#top-of-site-pixel-anchor')!)
</script>
