---
import Icon from 'astro-icon'
import ShareButton from './Share.astro'
import FullScreen from './FullScreen.astro'

interface Props {
  language: string | undefined
}

const {language} = Astro.params
---

<div class='group fixed bottom-4 mx-auto flex h-12 flex-col items-center justify-center'>
  <div
    id='controls'
    class='flex w-full max-w-2xl items-center justify-between gap-4 transition-all duration-500'
  >
    <!-- back button -->
    <a id='prev' class='btn-game enabled' href='' aria-label='previous question'>
      <Icon name='ic:outline-arrow-back' class='h-10 w-10' />
    </a>
    <!-- full screen button -->
    <FullScreen />
    <!-- language button -->
    <button
      onclick='
      langsModal.showModal()
      '
      aria-label='change language'
      class:list={[
        'btn btn-circle who-modal uppercase bg-gray hover:bg-gray hover:text-primary-light',
        {'w-fit px-4': language?.includes('-')},
      ]}>{language}</button
    >
    <!-- share button -->
    <ShareButton />
    <!-- next button -->
    <a id='next' class='btn-game enabled' href='' aria-label='next question'>
      <Icon name='ic:outline-arrow-forward' class='h-10 w-10' />
    </a>
  </div>
</div>

<style>
  a.disabled {
    @apply pointer-events-none text-gray opacity-50;
  }
  a.enabled {
    @apply hover:bg-transparent hover:text-yellow-500;
  }
</style>

<script>
  import {debounce} from '~utils/debounce'

  import {initPage, idsStore, GameStatus} from '~stores/Game.store'
  import {getCurrentQuestionId, getQuestionUrl} from '~utils'

  const addToggle = () => {
    const el = document.getElementById('controls')

    if (el) {
      const hide = () => el.classList.add('translate-y-16')
      const show = () => el.classList.remove('translate-y-16')
      const delayHide = debounce(() => hide(), 3000)

      delayHide()

      document.addEventListener('pointermove', () => {
        show()
        delayHide()
      })
    }
  }

  const addNextPrev = () => {
    initPage(getCurrentQuestionId())

    const dirs = ['prev', 'next']
    const els = {
      [dirs[0]]: document.getElementById(dirs[0])!,
      [dirs[1]]: document.getElementById(dirs[1])!,
    }
    const keys: {[key: string]: string} = {
      ArrowLeft: 'prev',
      ArrowRight: 'next',
    }

    dirs.forEach((dir) => {
      const qid = idsStore.get()[dir as keyof GameStatus]

      if (qid) {
        els[dir].setAttribute('href', getQuestionUrl(qid)!)
      } else {
        els[dir].classList.replace('enabled', 'disabled')
      }
    })

    const keyPress = ({key}: KeyboardEvent) => {
      if (Object.keys(keys).includes(key)) {
        const qid = idsStore.get()[keys[key] as keyof GameStatus]
        if (!qid) return

        window.location.href = getQuestionUrl(qid)
      }
    }

    document.addEventListener('keydown', keyPress)
  }

  addToggle()
  addNextPrev()

  document.addEventListener('astro:load', () => {
    addToggle()
    addNextPrev()
  })
</script>
