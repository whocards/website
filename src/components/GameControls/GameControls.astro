---
import Icon from 'astro-icon'
import ShareButton from './Share.astro'
import FullscreenButton from './Fullscreen.astro'

interface Props {
  language: string | undefined
}

const {language} = Astro.params
---

<div class='group flex h-12 flex-col items-center justify-end overflow-hidden'>
  <div
    id='controls'
    class='flex w-full max-w-2xl items-center justify-between overflow-hidden transition-all duration-300'
  >
    <!-- back button -->
    <a id='prev' class='btn-game enabled' href=''>
      <Icon name='ic:outline-arrow-back' class:list='h-10 w-10' />
    </a>
    <div class='flex gap-6'>
      <!-- full screen button -->
      <FullscreenButton />
      <!-- language button -->
      <button
        class:list={[
          'btn btn-circle who-modal uppercase bg-gray hover:bg-gray hover:text-primary-light',
          {'w-fit px-4': language?.includes('-')},
        ]}>{language}</button
      >
      <!-- share button -->
      <ShareButton />
    </div>
    <!-- next button -->
    <a id='next' class='btn-game enabled' href=''>
      <Icon name='ic:outline-arrow-forward' class='h-10 w-10' />
    </a>
  </div>
</div>

<style>
  a.disabled {
    @apply pointer-events-none text-gray opacity-50;
  }
  a.enabled {
    @apply hover:bg-transparent hover:text-yellow-500;
  }
</style>

<script>
  import {debounce} from '~utils/debounce'

  const el = document.getElementById('controls')

  if (el) {
    const hide = () => el.classList.add('translate-y-12')
    const show = () => el.classList.remove('translate-y-12')
    const delayHide = debounce(() => hide(), 3000)

    delayHide()

    document.addEventListener('pointermove', () => {
      show()
      delayHide()
    })
  }
</script>

<script>
  import {initPage, idsStore, GameStatus} from '~stores/Game.store'
  import {getCurrentQuestionId, getQuestionUrl} from '~utils'

  initPage(getCurrentQuestionId())

  const dirs = ['prev', 'next']
  const els = {
    [dirs[0]]: document.getElementById(dirs[0])!,
    [dirs[1]]: document.getElementById(dirs[1])!,
  }
  const keys: {[key: string]: string} = {
    ArrowLeft: dirs[0],
    ArrowRight: dirs[1],
  }

  dirs.forEach((dir) => {
    const qid = idsStore.get()[dir as keyof GameStatus]

    if (qid) {
      els[dir].setAttribute('href', getQuestionUrl(qid)!)
    } else {
      els[dir].classList.replace('enabled', 'disabled')
    }
  })

  const keyPress = ({key}: KeyboardEvent) => {
    if (Object.keys(keys).includes(key)) {
      els[keys[key]].click()
    }
  }

  document.addEventListener('keydown', keyPress)
</script>
