---
import type {ZodIssue} from 'zod'
import Button from '~components/ui/Button.astro'
import Checkbox from '~components/ui/Checkbox.astro'
import Input from '~components/ui/Input.astro'
import type {getPurchaseById} from '~server/db'

export interface Props {
  data: Awaited<ReturnType<typeof getPurchaseById>>
  quantity: number
  formData?: Record<string, any>
  errors?: Record<string, ZodIssue>
  submitted: boolean
}

const {
  data: {user, purchase, shipping},
  quantity,
  formData,
  errors,
  submitted,
} = Astro.props
---

<div
  class='flex flex-col items-center justify-center text-center md:text-start md:items-start gap-4 md:gap-5'
>
  <h2
    class='text-3xl lg:text-5xl font-bold font-title tracking-tight leading-tight'
    id='delivery-form'
  >
    Fill Out the Form for delivery
  </h2>
  {
    errors ? (
      <p class='lg:text-xl text-red-500'>
        There were some errors with your submission. Please check the form and try again.
      </p>
    ) : (
      <p class='text-sm lg:text-xl text-gray-dark'>
        Please ensure that you complete the form below in order to receive your WhoCards. Expect the
        shipment to take place in early December, right on time for the Holiday Season.
      </p>
    )
  }
  <form id='address-form' method='POST' class='flex flex-col w-full pb-14'>
    <Input name='name' required value={formData?.name ?? user.name} error={errors?.name} />
    <Input
      name='email'
      type='email'
      required
      value={formData?.email ?? user.email}
      error={errors?.email}
    />
    <Input name='company' value={formData?.company ?? shipping?.company} error={errors?.company} />
    <Input
      name='phone'
      type='tel'
      required
      value={formData?.phone ?? shipping?.phone}
      error={errors?.phone}
    />
    <div class='flex flex-col lg:gap-4'>
      <Input
        name='address'
        required
        title='street 1'
        value={formData?.address ?? shipping?.address}
        error={errors?.address}
      />
      <Input
        name='address2'
        title='street 2'
        value={formData?.address2 ?? shipping?.address2}
        error={errors?.address2}
      />
    </div>
    <div class='flex flex-col lg:gap-4'>
      <Input
        name='zip'
        required
        title='zip code'
        value={formData?.zip ?? shipping?.zip}
        error={errors?.zip}
      />
      <Input name='city' required value={formData?.city ?? shipping?.city} error={errors?.city} />
    </div>
    <div class='flex flex-col lg:gap-4'>
      <Input name='region' value={formData?.region ?? shipping?.region} error={errors?.region} />
      <Input
        name='country'
        required
        value={formData?.country ?? shipping?.country}
        error={errors?.country}
      />
    </div>
    <Checkbox name='privacy' required checked={!!shipping} error={errors?.privacy}>
      Yes, I have read and agree to WhoCards' Privacy Policy
    </Checkbox>
    <Checkbox name='newsletter' checked={!!formData?.newsletter ?? !!user.newsletter}>
      Yes, I would like to sign up for occasional newsletters from WhoCards.
    </Checkbox>

    <!-- hidden inputs -->
    <input type='hidden' name='purchaseId' value={purchase.id} />
    <input type='hidden' name='quantity' value={quantity} />
    <Button type='submit' class='mt-4 capitalize' full>
      {submitted ? 'update' : 'submit'}
    </Button>
  </form>
</div>

<script>
  const form = document.getElementById('address-form') as HTMLFormElement
  const submit = form?.querySelector('button[type="submit"]')

  const setIsValid = () => {
    if (form?.checkValidity()) {
      submit?.removeAttribute('disabled')
    } else {
      submit?.setAttribute('disabled', '')
    }
  }

  setIsValid()

  form?.addEventListener('change', (e) => {
    setIsValid()
  })
</script>
