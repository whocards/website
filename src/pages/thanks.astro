---
export const prerender = false

import {Icon} from 'astro-icon'
import type {ZodIssue} from 'zod'
import ShippingForm from '~components/Purchase/ShippingForm.astro'
import {openCollectiveProducts} from '~constants/products'
import Layout from '~layouts/Layout.astro'
import {createSheetRow, createZenShipping} from '~server/csv'
import {
  getPurchaseById,
  insertShippingAddress,
  insertShippingSchema,
  insertUser,
  type FullPurchase,
  type PurchaseSelect,
} from '~server/db'
import {thankYouFormSchema} from '~utils/schemas'

let errors = {}
let formData
let data: FullPurchase
let purchase: PurchaseSelect
let quantity: number

// get purchase id from url
const purchaseId = Astro.url.searchParams.get('orderIdV2') ?? ''

// TODO where should redirect happen?
if (!purchaseId) {
  return Astro.redirect('/preorder?error=missingParams')
}

// get data from db
try {
  data = await getPurchaseById(purchaseId)
  if (!data) throw new Error('Purchase not found')
  purchase = data.purchase
  quantity =
    data.shipping?.quantity ??
    openCollectiveProducts.filter((p) => p.title === purchase.category)[0].quantity
} catch (error) {
  console.error((error as Error).message)
  return Astro.redirect('/preorder?error=invalidParams')
}

// when form is posted
if (Astro.request.method === 'POST') {
  try {
    const rawFormData = await Astro.request.formData()
    formData = Object.fromEntries(rawFormData.entries()) as Record<string, string>
    // validate base form
    const form = thankYouFormSchema.safeParse({...formData})
    if (!form.success) {
      const formErrors = form.error.issues?.reduce(
        (acc, curr) => {
          acc[`${curr.path[0]}`] = curr
          return acc
        },
        {} as Record<string, ZodIssue>
      )
      errors = {...errors, ...formErrors}
    }
    // validate shipping
    const shipping = insertShippingSchema.safeParse(formData)
    if (!shipping.success) {
      const shippingErrors = shipping.error.issues?.reduce(
        (acc, curr) => {
          acc[`${curr.path[0]}`] = curr
          return acc
        },
        {} as Record<string, ZodIssue>
      )
      errors = {...errors, ...shippingErrors}
    }

    if (form.success && shipping.success) {
      // update user if newsletter is different
      if (Object.hasOwn(form.data, 'newsletter') && form.data.newsletter !== data.user.newsletter) {
        await insertUser({...data.user, newsletter: form.data.newsletter})
      }

      let shouldUpdate = !data.shipping

      if (!shouldUpdate) {
        const {id, createdAt, updatedAt, ...shippingData} = data.shipping
        shouldUpdate = JSON.stringify(shippingData) !== JSON.stringify(shipping.data)
      }

      if (shouldUpdate) {
        console.log('updating shipping')
        const dbShipping = await insertShippingAddress(shipping.data)
        const zenShipping = await createZenShipping(dbShipping)
        if (!zenShipping.errors.length && !data.shipping) {
          await createSheetRow(dbShipping)
        } else {
          // TODO update sheet?
        }
      }
    }
  } catch (error) {
    console.error(error)
  }
}
---

<Layout title='Thank You!'>
  <div
    class='grid grid-flow-row md:grid-flow-col md:grid-cols-2 md:px-[2vw] lg:max-w-7xl px-5 lg:px-32 pt-28 lg:pt-32'
  >
    <div
      class='flex text-sm lg:text-xl text-gray-dark flex-col items-center md:items-start md:justify-start justify-center text-center md:text-start gap-4 md:gap-5 pb-14'
    >
      <Icon name='thumbs-up' class='w-16 h-16' />
      <h1
        class='text-4xl text-white lg:text-6xl md:pt-4 md:pb-2 font-bold font-title tracking-tight leading-tight'
      >
        Thank you for<br />your contribution
      </h1>
      <p>Your support makes a difference!</p>
      <Icon name='divider' class='w-64 py-2 md:hidden' />
      <Icon name='divider-left' class='w-3/4 py-4 hidden md:block' />
      <p class='text-xs md:text-sm uppercase font-semibold'>Purchase details</p>
      <h2 class='text-6xl text-white font-semibold pb-2'>â‚¬{purchase.price / 100}</h2>
      <div class='flex flex-col gap-3'>
        <p>Plan: {purchase.category}</p>
        <p>Date: {purchase.date.toDateString()}</p>
        <p>ID: {purchase.id}</p>
      </div>
    </div>
    <div
      class='flex flex-col items-center justify-center text-center md:text-start md:items-start gap-4 md:gap-5'
    >
      <h2 class='text-3xl lg:text-5xl font-bold font-title tracking-tight leading-tight'>
        Fill Out the Form for delivery
      </h2>
      <p class='text-sm lg:text-xl text-gray-dark'>
        Please ensure that you complete the form below in order to receive your WhoCards. Expect the
        shipment to take place in early December, right on time for Christmas.
      </p>
      {
        data.shipping && (
          <p class='border-green-800 border-2 text-white p-4 mb-4 rounded-lg w-full'>
            Your shipping information has been submitted sucessfully!
            <br />
            You may edit your shipping information below if needed.
          </p>
        )
      }
      {
        errors && Object.keys(errors).length > 0 && (
          <p class='border-red border-2 text-white p-4 mb-4 rounded-lg w-full'>
            There were some errors with your submission. Please review the form below and try again.
          </p>
        )
      }
      <ShippingForm data={data} quantity={quantity} errors={errors} formData={formData} submitted />
    </div>
  </div>
</Layout>
